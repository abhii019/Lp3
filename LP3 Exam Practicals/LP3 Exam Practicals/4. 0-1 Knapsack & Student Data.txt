# DAA 4 - 0-1 Knapsack Problem using Dynamic Programming

# Function to solve 0-1 Knapsack problem using Dynamic Programming
def knapsack_dp(weights, values, capacity):
    n = len(values)  # Number of items
    # Create a DP table with size (n+1) x (capacity+1)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Fill the DP table
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                # Either include the item or exclude it
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]

    # Return the maximum value for the given capacity
    return dp[n][capacity]

# Driver code for user input
if __name__ == "__main__":
    # Step 1: Input number of items
    n = int(input("Enter the number of items: "))

    values = []
    weights = []

    # Step 2: Input values and weights for each item
    for i in range(n):
        value = int(input(f"Enter value of item {i + 1}: "))
        weight = int(input(f"Enter weight of item {i + 1}: "))
        values.append(value)
        weights.append(weight)

    # Step 3: Input the capacity of the knapsack
    capacity = int(input("Enter the capacity of the knapsack: "))

    # Step 4: Calculate and print the maximum value
    max_value = knapsack_dp(weights, values, capacity)
    print(f"Maximum value in knapsack = {max_value}")









# DAA 4 - 0-1 Knapsack Problem using Branch and Bound strategy.


from queue import PriorityQueue

# Node structure for Branch and Bound
class Node:
    def __init__(self, level, profit, weight, bound):
        self.level = level
        self.profit = profit
        self.weight = weight
        self.bound = bound

    # For priority queue (max heap) comparison
    def __lt__(self, other):
        return self.bound > other.bound

# Function to calculate upper bound
def calculate_bound(node, n, capacity, values, weights):
    if node.weight >= capacity:
        return 0
    profit_bound = node.profit
    j = node.level + 1
    total_weight = node.weight
    while j < n and total_weight + weights[j] <= capacity:
        total_weight += weights[j]
        profit_bound += values[j]
        j += 1
    if j < n:
        profit_bound += (capacity - total_weight) * (values[j] / weights[j])
    return profit_bound

# Function to solve 0-1 Knapsack problem using Branch and Bound
def knapsack_bb(values, weights, capacity):
    n = len(values)
    q = PriorityQueue()

    # Sort items by value-to-weight ratio
    items = sorted(range(n), key=lambda i: values[i] / weights[i], reverse=True)
    sorted_weights = [weights[i] for i in items]
    sorted_values = [values[i] for i in items]

    # Create a dummy node and insert it into the queue
    u = Node(-1, 0, 0, 0)
    v = Node(0, 0, 0, 0)
    u.bound = calculate_bound(u, n, capacity, sorted_values, sorted_weights)
    q.put(u)

    max_profit = 0
    while not q.empty():
        u = q.get()  # Get the node with the highest bound
        if u.bound > max_profit:
            # Branching: Exclude or include the next item
            v.level = u.level + 1
            v.weight = u.weight + sorted_weights[v.level]
            v.profit = u.profit + sorted_values[v.level]

            # Check if including the item is feasible
            if v.weight <= capacity and v.profit > max_profit:
                max_profit = v.profit

            # Calculate bound for including the item
            v.bound = calculate_bound(v, n, capacity, sorted_values, sorted_weights)
            if v.bound > max_profit:
                q.put(v)

            # Do the same for excluding the item
            v.weight = u.weight
            v.profit = u.profit
            v.bound = calculate_bound(v, n, capacity, sorted_values, sorted_weights)
            if v.bound > max_profit:
                q.put(v)

    return max_profit

# Driver code for user input
if __name__ == "__main__":
    # Step 1: Input number of items
    n = int(input("Enter the number of items: "))

    values = []
    weights = []

    # Step 2: Input values and weights for each item
    for i in range(n):
        value = int(input(f"Enter value of item {i + 1}: "))
        weight = int(input(f"Enter weight of item {i + 1}: "))
        values.append(value)
        weights.append(weight)

    # Step 3: Input the capacity of the knapsack
    capacity = int(input("Enter the capacity of the knapsack: "))

    # Step 4: Calculate and print the maximum value
    max_value = knapsack_bb(values, weights, capacity)
    print(f"Maximum value in knapsack = {max_value}")






--------------------------------------------------------------------------------------------------------------------------------------------------

// BT Student Data



// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.8.0;

// Build the Contract
contract MarksManagmtSys {
    // Create a structure for student details
    struct Student {
        int ID;
        string fName;
        string lName;
        int marks;
    }

    // Owner of the contract
    address owner;

    // Public student count
    int public stdCount = 0;

    // Mapping to store student records
    mapping(int => Student) public stdRecords;

    // Modifier to allow only the owner to execute certain functions
    modifier onlyOwner {
        require(owner == msg.sender, "Only the contract owner can execute this");
        _;
    }

    // Constructor to set the contract deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add new records
    function addNewRecords(
        int _ID,
        string memory _fName,
        string memory _lName,
        int _marks
    ) public onlyOwner {
        // Increase the student count by 1
        stdCount = stdCount + 1;

        // Add the new student record to the mapping
        stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
    }

    // Function to add bonus marks to the latest student record
    function bonusMarks(int _bonus) public onlyOwner {
        // Ensure there is at least one student before adding bonus marks
        require(stdCount > 0, "No student records available");

        // Add bonus marks to the last student's record
        stdRecords[stdCount].marks = stdRecords[stdCount].marks + _bonus;
    }
}




---------------------------------------------------------------------------------------------------------------
Dynamic 





public class Knapsack { 
    // Helper function to get the maximum of two values
    static int max(int a, int b) { 
        return (a > b) ? a : b; 
    } 

    // Function to solve the knapsack problem using dynamic programming
    static int knapSack(int W, int wt[], int val[], int n) { 
        int i, w; 
        int K[][] = new int[n + 1][W + 1]; 
        
        // Build table K[][] in bottom-up manner
        for (i = 0; i <= n; i++) { 
            for (w = 0; w <= W; w++) { 
                if (i == 0 || w == 0) 
                    K[i][w] = 0; 
                else if (wt[i - 1] <= w) 
                    K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]); 
                else 
                    K[i][w] = K[i - 1][w]; 
            } 
        } 
        
        return K[n][W]; 
    }

    // Main method to test the knapSack function
    public static void main(String args[]) { 
        int val[] = new int[] { 60, 100, 120 }; 
        int wt[] = new int[] { 10, 20, 30 }; 
        int W = 50; 
        int n = val.length; 
        System.out.println(knapSack(W, wt, val, n)); 
    } 
}




-------------------------------------------------------------------------------------------------------------------

Branch and bound 




import java.util.PriorityQueue;
import java.util.Comparator;

class KnapsackBranchAndBound {

    // Node class to represent a branch node
    static class Node {
        int level, profit, weight;
        double bound;

        public Node(int level, int profit, int weight) {
            this.level = level;
            this.profit = profit;
            this.weight = weight;
            this.bound = 0;
        }
    }

    // Comparator to sort nodes by bound (max-heap behavior)
    static class NodeComparator implements Comparator<Node> {
        @Override
        public int compare(Node a, Node b) {
            return Double.compare(b.bound, a.bound);
        }
    }

    // Function to calculate the upper bound of a node
    static double calculateBound(Node u, int n, int W, int[] values, int[] weights) {
        if (u.weight >= W) return 0;

        double profit_bound = u.profit;
        int j = u.level + 1;
        int total_weight = u.weight;

        // Include next items until knapsack is full
        while (j < n && total_weight + weights[j] <= W) {
            total_weight += weights[j];
            profit_bound += values[j];
            j++;
        }

        // Include fractional part of the next item (if any)
        if (j < n) {
            profit_bound += (W - total_weight) * ((double) values[j] / weights[j]);
        }
        return profit_bound;
    }

    // Function to solve 0-1 Knapsack problem using Branch and Bound
    static int knapsack(int[] values, int[] weights, int W) {
        int n = values.length;

        // Sort items by value-to-weight ratio
        Integer[] idx = new Integer[n];
        for (int i = 0; i < n; i++) idx[i] = i;
        java.util.Arrays.sort(idx, (i, j) -> Double.compare(
            (double) values[j] / weights[j], (double) values[i] / weights[i]
        ));

        int[] sortedValues = new int[n];
        int[] sortedWeights = new int[n];
        for (int i = 0; i < n; i++) {
            sortedValues[i] = values[idx[i]];
            sortedWeights[i] = weights[idx[i]];
        }

        // Priority queue to store live nodes (max-heap)
        PriorityQueue<Node> pq = new PriorityQueue<>(new NodeComparator());

        // Initial dummy node
        Node u = new Node(-1, 0, 0);
        u.bound = calculateBound(u, n, W, sortedValues, sortedWeights);
        pq.add(u);

        int maxProfit = 0;

        // Branch and Bound search
        while (!pq.isEmpty()) {
            u = pq.poll();

            if (u.level == n - 1 || u.bound <= maxProfit) continue;

            // Branch: Include the next item
            Node v = new Node(u.level + 1, u.profit + sortedValues[u.level + 1], u.weight + sortedWeights[u.level + 1]);
            if (v.weight <= W && v.profit > maxProfit) {
                maxProfit = v.profit;
            }

            v.bound = calculateBound(v, n, W, sortedValues, sortedWeights);
            if (v.bound > maxProfit) pq.add(v);

            // Branch: Exclude the next item
            v = new Node(u.level + 1, u.profit, u.weight);
            v.bound = calculateBound(v, n, W, sortedValues, sortedWeights);
            if (v.bound > maxProfit) pq.add(v);
        }
        return maxProfit;
    }

    public static void main(String[] args) {
        int[] values = {60, 100, 120};   // Item values
        int[] weights = {10, 20, 30};    // Item weights
        int capacity = 50;               // Knapsack capacity

        int maxProfit = knapsack(values, weights, capacity);
        System.out.println("Maximum value in knapsack = " + maxProfit);
    }
}

